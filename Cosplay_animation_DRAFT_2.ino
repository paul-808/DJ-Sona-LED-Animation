
// Cosplay Controller
// By Paul Jarvey
// Sept 1, 2016
// Note: contains "plasma generator" by Edmund "Skorn" Horn
// face = leds 0-384
// OctoWS2811Lib + OctoWS2811 Shield + FFT

// LIBRARY DEFINITIONS
#include <OctoWS2811.h>
//OctoWS2811 Defn. Stuff
#define COLS_LEDs 26  // all of the following params need to be adjusted for screen size
#define ROWS_LEDs 32  // LED_LAYOUT assumed 0 if ROWS_LEDs > 8
#define LEDS_PER_STRIP 384
DMAMEM int displayMemory[LEDS_PER_STRIP*6];
int drawingMemory[LEDS_PER_STRIP*6];
const int config = WS2811_GRB | WS2811_800kHz;
OctoWS2811 leds(LEDS_PER_STRIP, displayMemory, drawingMemory, config);

// The followin garrays are used to speed up the animation calculations and reduce visible jitter

//Byte val 2PI Cosine Wave, offset by 1 PI 
//supports fast trig calcs and smooth LED fading/pulsing.
uint8_t const cos_wave[256] PROGMEM =  
{0,0,0,0,1,1,1,2,2,3,4,5,6,6,8,9,10,11,12,14,15,17,18,20,22,23,25,27,29,31,33,35,38,40,42,
45,47,49,52,54,57,60,62,65,68,71,73,76,79,82,85,88,91,94,97,100,103,106,109,113,116,119,
122,125,128,131,135,138,141,144,147,150,153,156,159,162,165,168,171,174,177,180,183,186,
189,191,194,197,199,202,204,207,209,212,214,216,218,221,223,225,227,229,231,232,234,236,
238,239,241,242,243,245,246,247,248,249,250,251,252,252,253,253,254,254,255,255,255,255,
255,255,255,255,254,254,253,253,252,252,251,250,249,248,247,246,245,243,242,241,239,238,
236,234,232,231,229,227,225,223,221,218,216,214,212,209,207,204,202,199,197,194,191,189,
186,183,180,177,174,171,168,165,162,159,156,153,150,147,144,141,138,135,131,128,125,122,
119,116,113,109,106,103,100,97,94,91,88,85,82,79,76,73,71,68,65,62,60,57,54,52,49,47,45,
42,40,38,35,33,31,29,27,25,23,22,20,18,17,15,14,12,11,10,9,8,6,6,5,4,3,2,2,1,1,1,0,0,0,0
};

//Gamma Correction Curve
uint8_t const exp_gamma[256] PROGMEM =
{0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,2,2,2,2,2,2,2,2,3,3,3,3,3,
4,4,4,4,4,5,5,5,5,5,6,6,6,7,7,7,7,8,8,8,9,9,9,10,10,10,11,11,12,12,12,13,13,14,14,14,15,15,
16,16,17,17,18,18,19,19,20,20,21,21,22,23,23,24,24,25,26,26,27,28,28,29,30,30,31,32,32,33,
34,35,35,36,37,38,39,39,40,41,42,43,44,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,
61,62,63,64,65,66,67,68,70,71,72,73,74,75,77,78,79,80,82,83,84,85,87,89,91,92,93,95,96,98,
99,100,101,102,105,106,108,109,111,112,114,115,117,118,120,121,123,125,126,128,130,131,133,
135,136,138,140,142,143,145,147,149,151,152,154,156,158,160,162,164,165,167,169,171,173,175,
177,179,181,183,185,187,190,192,194,196,198,200,202,204,207,209,211,213,216,218,220,222,225,
227,229,232,234,236,239,241,244,246,249,251,253,254,255
};

// reference array (faceplate LED locations, using a dual array, format [y][x], where 0,0 is the bottom-left position

uint16_t location[16][24] = {   
  {15,16,47,48,79,80,111,112,143,144,175,176,207,208,239,240,376,377,378,379,380,381,382,383},
  {14,17,46,49,78,81,110,113,142,145,174,177,206,209,238,241,375,374,373,372,371,370,369,368},
  {13,18,45,50,77,82,109,114,141,146,173,178,205,210,237,242,360,361,362,363,364,365,366,367},
  {12,19,44,51,76,83,108,115,140,147,172,179,204,211,236,243,359,358,357,356,355,354,353,352},
  {11,20,43,52,75,84,107,116,139,148,171,180,203,212,235,244,344,345,346,347,348,349,350,351},
  {10,21,42,53,74,85,106,117,138,149,170,181,202,213,234,245,343,342,341,340,339,338,337,336},
  {9,22,41,54,73,86,105,118,137,150,169,182,201,214,233,246,328,329,330,331,332,333,334,335},
  {8,23,40,55,72,87,104,119,136,151,168,183,200,215,232,247,327,326,325,324,323,322,321,320},
  {7,24,39,56,71,88,103,120,135,152,167,184,199,216,231,248,312,313,314,315,316,317,318,319},
  {6,25,38,57,70,89,102,121,134,153,166,185,198,217,230,249,311,310,309,308,307,306,305,304},
  {5,26,37,58,69,90,101,122,133,154,165,186,197,218,229,250,296,297,298,299,300,301,302,303},
  {4,27,36,59,68,91,100,123,132,155,164,187,196,219,228,251,295,294,293,292,291,290,289,288},
  {3,28,35,60,67,92,99,124,131,156,163,188,195,220,227,252,280,281,282,283,284,285,286,287},
  {2,29,34,61,66,93,98,125,130,157,162,189,194,221,226,253,279,278,277,276,275,274,273,272},
  {1,30,33,62,65,94,97,126,129,158,161,190,193,222,225,254,264,265,266,267,268,269,270,271},
  {0,31,32,63,64,95,96,127,128,159,160,191,192,223,224,255,263,262,261,260,259,258,257,256}};

// reference array defining the columns in which the bars occur. [0][0-7] is the first....

uint8_t blueLocation[3][8] = {  
  {1,2,3,4,5,6},
  {8,9,10,11,12,13,14,15},
  {17,18,19,20,21,22}};

// reference array defining teal fade for blue bar animation  
uint8_t blueFader[56][3] = {  
  {120,255,255},
  {120,255,255},
  {113,239,239},
  {105,224,224},
  {99,210,210},
  {93,197,197},
  {87,185,185},
  {81,173,173},
  {76,162,162},
  {72,152,152},
  {67,143,143},
  {63,134,134},
  {59,125,125},
  {55,118,118},
  {52,110,110},
  {49,103,103},
  {46,97,97},
  {43,91,91},
  {40,85,85},
  {38,80,80},
  {35,75,75},
  {33,70,70},
  {31,66,66},
  {29,62,62},
  {27,58,58},
  {25,54,54},
  {24,51,51},
  {22,48,48},
  {21,45,45},
  {20,42,42},
  {18,39,39},
  {17,37,37},
  {16,34,34},
  {15,32,32},
  {14,30,30},
  {13,28,28},
  {13,27,27},
  {12,25,25},
  {11,23,23},
  {10,22,22},
  {10,22,22},
  {10,22,22},
  {10,22,22},
  {10,22,22},
  {10,22,22},
  {10,22,22},
  {10,22,22},
  {10,22,22},
  {10,22,22},
  {10,22,22},
  {10,22,22},
  {10,22,22},
  {10,22,22},
  {10,22,22},
  {10,22,22},
  {10,22,22}};


uint8_t blueBackground[16][3] = {  
  {12,26,26},
  {6,13,13},
  {0,2,0},
  {0,2,0},
  {0,3,1},
  {0,3,1},
  {0,4,2},
  {0,6,3},
  {0,8,4},
  {0,10,5},
  {0,15,8},
  {0,21,10},
  {0,25,14},
  {0,30,17},
  {0,35,20},
  {0,40,50}};

uint8_t blueForeground[16][3] = {  
  {120,255,255},
  {12,215,255},
  {0,207,245},
  {0,200,235},
  {0,195,226},
  {0,187,217},
  {0,181,208},
  {0,175,200},
  {0,169,192},
  {0,164,184},
  {0,159,177},
  {0,159,170},
  {0,149,163},
  {0,145,156},
  {0,140,150},
  {0,136,144}};

uint8_t columnOffset[2][24] = {    
  {0,3,12,26,44,64,86,106,124,138,147,150,150,147,138,124,106,86,64,44,26,12,3,0}, // sin-based column offset for purple() 
  {1,1,2,2,3,4,5,6,7,7,7,7,7,7,7,7,6,5,4,3,2,2,1,1}};  // chance of glitter for purple() 

uint8_t purpleFader[300][3] = {
{128,0,200},
{127,2,201},
{125,4,201},
{124,6,202},
{123,8,202},
{122,10,203},
{120,12,203},
{119,14,204},
{118,16,204},
{116,18,205},
{115,21,206},
{114,23,206},
{113,25,207},
{111,27,207},
{110,29,208},
{109,31,208},
{108,33,209},
{106,35,209},
{105,37,210},
{104,39,210},
{102,41,211},
{101,43,212},
{100,45,212},
{99,47,213},
{97,49,213},
{96,51,214},
{95,53,214},
{93,55,215},
{92,57,215},
{91,59,216},
{90,62,217},
{88,64,217},
{87,66,218},
{86,68,218},
{84,70,219},
{83,72,219},
{82,74,220},
{81,76,220},
{79,78,221},
{78,80,221},
{77,82,222},
{76,84,223},
{74,86,223},
{73,88,224},
{72,90,224},
{70,92,225},
{69,94,225},
{68,96,226},
{67,98,226},
{65,100,227},
{64,103,228},
{63,105,228},
{61,107,229},
{60,109,229},
{59,111,230},
{58,113,230},
{56,115,231},
{55,117,231},
{54,119,232},
{52,121,232},
{51,123,233},
{50,125,234},
{49,127,234},
{47,129,235},
{46,131,235},
{45,133,236},
{44,135,236},
{42,137,237},
{41,139,237},
{40,141,238},
{38,144,239},
{37,146,239},
{36,148,240},
{35,150,240},
{33,152,241},
{32,154,241},
{31,156,242},
{29,158,242},
{28,160,243},
{27,162,243},
{26,164,244},
{24,166,245},
{23,168,245},
{22,170,246},
{20,172,246},
{19,174,247},
{18,176,247},
{17,178,248},
{15,180,248},
{14,182,249},
{13,185,250},
{12,187,250},
{10,189,251},
{9,191,251},
{8,193,252},
{6,195,252},
{5,197,253},
{4,199,253},
{3,201,254},
{1,203,254},
{0,205,255},
{0,203,255},
{0,201,255},
{0,199,255},
{0,197,255},
{0,195,255},
{0,193,255},
{0,191,255},
{0,189,255},
{0,187,255},
{0,185,255},
{0,182,255},
{0,180,255},
{0,178,255},
{0,176,255},
{0,174,255},
{0,172,255},
{0,170,255},
{0,168,255},
{0,166,255},
{0,164,255},
{0,162,255},
{0,160,255},
{0,158,255},
{0,156,255},
{0,154,255},
{0,152,255},
{0,150,255},
{0,148,255},
{0,146,255},
{0,144,255},
{0,141,255},
{0,139,255},
{0,137,255},
{0,135,255},
{0,133,255},
{0,131,255},
{0,129,255},
{0,127,255},
{0,125,255},
{0,123,255},
{0,121,255},
{0,119,255},
{0,117,255},
{0,115,255},
{0,113,255},
{0,111,255},
{0,109,255},
{0,107,255},
{0,105,255},
{0,103,255},
{0,100,255},
{0,98,255},
{0,96,255},
{0,94,255},
{0,92,255},
{0,90,255},
{0,88,255},
{0,86,255},
{0,84,255},
{0,82,255},
{0,80,255},
{0,78,255},
{0,76,255},
{0,74,255},
{0,72,255},
{0,70,255},
{0,68,255},
{0,66,255},
{0,64,255},
{0,62,255},
{0,59,255},
{0,57,255},
{0,55,255},
{0,53,255},
{0,51,255},
{0,49,255},
{0,47,255},
{0,45,255},
{0,43,255},
{0,41,255},
{0,39,255},
{0,37,255},
{0,35,255},
{0,33,255},
{0,31,255},
{0,29,255},
{0,27,255},
{0,25,255},
{0,23,255},
{0,21,255},
{0,18,255},
{0,16,255},
{0,14,255},
{0,12,255},
{0,10,255},
{0,8,255},
{0,6,255},
{0,4,255},
{0,2,255},
{0,0,255},
{1,0,254},
{3,0,254},
{4,0,253},
{5,0,253},
{6,0,252},
{8,0,252},
{9,0,251},
{10,0,251},
{12,0,250},
{13,0,250},
{14,0,249},
{15,0,248},
{17,0,248},
{18,0,247},
{19,0,247},
{20,0,246},
{22,0,246},
{23,0,245},
{24,0,245},
{26,0,244},
{27,0,243},
{28,0,243},
{29,0,242},
{31,0,242},
{32,0,241},
{33,0,241},
{35,0,240},
{36,0,240},
{37,0,239},
{38,0,239},
{40,0,238},
{41,0,237},
{42,0,237},
{44,0,236},
{45,0,236},
{46,0,235},
{47,0,235},
{49,0,234},
{50,0,234},
{51,0,233},
{52,0,232},
{54,0,232},
{55,0,231},
{56,0,231},
{58,0,230},
{59,0,230},
{60,0,229},
{61,0,229},
{63,0,228},
{64,0,228},
{65,0,227},
{67,0,226},
{68,0,226},
{69,0,225},
{70,0,225},
{72,0,224},
{73,0,224},
{74,0,223},
{76,0,223},
{77,0,222},
{78,0,221},
{79,0,221},
{81,0,220},
{82,0,220},
{83,0,219},
{84,0,219},
{86,0,218},
{87,0,218},
{88,0,217},
{90,0,217},
{91,0,216},
{92,0,215},
{93,0,215},
{95,0,214},
{96,0,214},
{97,0,213},
{99,0,213},
{100,0,212},
{101,0,212},
{102,0,211},
{104,0,210},
{105,0,210},
{106,0,209},
{108,0,209},
{109,0,208},
{110,0,208},
{111,0,207},
{113,0,207},
{114,0,206},
{115,0,206},
{116,0,205},
{118,0,204},
{119,0,204},
{120,0,203},
{122,0,203},
{123,0,202},
{124,0,202},
{125,0,201},
{127,0,201}
};



// input pins

const uint8_t button1 = 19;
const uint8_t button2 = 22;
const uint8_t button3 = 23;
const uint8_t pot1 = 18;
const uint8_t batt = 8;
uint8_t buttonState = 5;
uint8_t lastButtonState = 5;
unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled
unsigned long debounceDelay = 50;    // the debounce time; increase if the output flickers
int sensorValue = 0;
float voltage = 0; 
int reading = 0;
uint8_t fadeRate = 1;
uint8_t battstat = 2;
uint8_t bright = 10;  // LIMIT BRIGHTNESS! no smaller than 5 or so
int lastBeat = 0;
int beatFrame = 200;
int nFrames = 20; 
int color = 0;
int z = 0;
int sX = 0; 
int lastSX = 0;
int sY = 0;
int lastSY = 0;
int c = 0;
 unsigned long frameCount=25500;
int pixelIndex = 0;
void plasma();
void buttons();
void blue();
void purple();

void setup()
{
  pinMode(13, OUTPUT);
  leds.begin();
  leds.show();
  pinMode(button1, INPUT);
  pinMode(button2, INPUT);
  pinMode(button3, INPUT);

// ears etc


    for (uint16_t v = 0;  v < 1250; v++){
                uint8_t r = (2+ (v % 10));
                uint8_t g = 0;
                uint8_t b = 0;
                leds.setPixel(v, ((r << 16) | (g << 8) | b)); }
      leds.show();          
    

}


void loop()
{
buttons();
pots();
switch (buttonState) {
    case 0:  //off


        
      break;
    case 1:
        blue();
      break;
    case 2:
        purple();
      break;
    case 3:
        red();
      break;
    case 4:
      plasma ();
    break;
     case 5:
      // BATT WARNING CONDITION, also READY
              for (int c = 0; c < 256; c++){
                int m = abs(c-128)/bright;
                for (uint16_t v = 0;  v < 1250; v++){
                uint8_t r = (m);
                uint8_t g = 0;
                uint8_t b = 0;
                leds.setPixel(v, ((r << 16) | (g << 8) | b)); 
                }
                
              leds.show();
              }

      
    break;

 
  }

}





